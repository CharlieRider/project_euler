"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not
exceed four million, find the sum of the even-valued terms.
"""


class FilteredFibs:
    """
    iterator that returns the sum of even or odd numbers in a
    Fibonacci Sequence up to a max number

    Params:
        max : the highest number
        sequence : 'evens', 'odds' or a custom list of truth statements
        truths_any : parameter deciding if truth statements are AND or OR statements
    """
    def __init__(self, max = 0, sequence='evens', truths_any = False):
        self.max = max
        self.rolling_sum = 0
        self.truths_any = truths_any
        if sequence == 'evens':
            self.truths = [lambda x: (x % 2 == 0)]
        elif sequence == 'odds':
            self.truths = [lambda x: (x % 2 != 0)]
        else:
            self.truths = sequence

    def __iter__(self):
        self.n = 1
        self.n_1 = 0
        self.nth = 0
        return self

    def __next__(self):
        if self.n < self.max:
            if self.truths_any:
                if any(f(self.n) for f in self.truths):
                    self.rolling_sum += self.n
            else:
                if all(f(self.n) for f in self.truths):
                    self.rolling_sum += self.n
            # this is a little sloppy, probably could be better
            self.nth = self.n + self.n_1
            self.n_1 = self.n
            self.n = self.nth
            return self.rolling_sum
        else:
            raise StopIteration


filt_fibs = FilteredFibs(max=1e100, sequence='evens')
ffi = iter(filt_fibs)
for fib in ffi:
    pass

print(ffi.rolling_sum)





